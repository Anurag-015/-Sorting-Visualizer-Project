Build a Sorting Visualizer Web App using Python Flask (backend) and HTML, CSS, JavaScript (frontend).

The project should include:

🎮 Game Mode

Multi-algorithm race (Bubble, Insertion, Selection, Merge, Quick, Heap).

Show live stats: comparisons, swaps, execution time.

Declare winner algorithm at the end.

Allow parallel race view (algorithms side-by-side).

Add fun visualization themes (bars, balls, cards, planets, emojis).

📚 Learn Mode

Step-by-step visualization of each algorithm.

User can:

Enter custom arrays

Or generate random arrays of any size.

Show Best, Worst, Average cases.

Edge cases: sorted, reverse, duplicates, equal elements.

Add narration mode: explain every step in plain English (e.g., “Compare 5 and 7 → Swap”).

Show detailed tabs for each algorithm:

Explanation in simple terms

Code in Python, C++, Java, JavaScript

Time & Space Complexity table

Real-world applications

📊 Advanced Features

Complexity Tracker → show O(n), O(n log n), O(n²) visually.

Memory Visualization → show when algorithms use extra space (like Merge Sort).

Algorithm Recommender → suggest the best algorithm for the dataset type (large, small, nearly sorted, etc.).

AI Tutor Assistant (simple rule-based) → answers “Why Quick Sort is faster than Bubble Sort?” in simple words.

Real-World Dataset Mode → allow sorting of CSV datasets (e.g., student grades, populations).

Gamification → quizzes, prediction challenges, achievements (“Mastered Divide & Conquer”).

Download Code → user can download snippets in chosen language.

Light/Dark Mode Toggle with responsive UI.

🛠 Tech Requirements

Flask backend serves the app and API endpoints.

Frontend: modern HTML, CSS, JavaScript with animations.

Keep code modular, well-commented, and structured so students can learn from it.

Use clean UI/UX (responsive, mobile-friendly).

🎯 End Goal

A unique Sorting Visualizer that is not just an animation tool but also an educational platform + interactive playground, combining Game Mode (fun races) and Learn Mode (deep explanations, code, applications, cases).